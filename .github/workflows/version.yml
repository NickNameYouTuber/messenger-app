name: Versioning and Changelog

on:
  push:
    branches:
      - 'feature/*'
      - 'hotfix/*'

env:
  VERSION_UP: '.github/scripts/version_up.py'
  NAME_VERSION_FILE: 'version/version'
  MAJOR: 'major'
  MINOR: 'minor'
  PATCH: 'patch'

jobs:
  versioning:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Extract branch name
        id: branch-names
        run: |
          BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
          echo "current_branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Update version [minor]
        if: startsWith(steps.branch-names.outputs.current_branch, 'feature')
        run: |
          python ${{ env.VERSION_UP }} ${{ env.NAME_VERSION_FILE }} ${{ env.MINOR }}
          VERSION=$(cat ${{ env.NAME_VERSION_FILE }})
          echo "NEW_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update version [patch]
        if: startsWith(steps.branch-names.outputs.current_branch, 'hotfix')
        run: |
          python ${{ env.VERSION_UP }} ${{ env.NAME_VERSION_FILE }} ${{ env.PATCH }}
          VERSION=$(cat ${{ env.NAME_VERSION_FILE }})
          echo "NEW_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Get all commits since last push
        if: env.NEW_VERSION != ''
        id: commits
        run: |
          # Получаем все коммиты с последнего пуша
          COMMIT_MESSAGES=$(git log HEAD^..HEAD --pretty=format:"%s" | sed 's/^/- /')
          echo "messages<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MESSAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update Changelog
        if: env.NEW_VERSION != ''
        run: |
          TIMESTAMP=$(date '+%d.%m.%Y %H:%M:%S')
          CHANGELOG_FILE="changelog.md"
          
          # Создаем changelog если его нет
          if [ ! -f "$CHANGELOG_FILE" ]; then
            echo "# Changelog" > $CHANGELOG_FILE
            echo "" >> $CHANGELOG_FILE
          fi
          
          # Добавляем новую запись с версией и всеми коммитами
          echo "## [${{ env.NEW_VERSION }}] - $TIMESTAMP" >> $CHANGELOG_FILE
          echo "" >> $CHANGELOG_FILE
          echo "${{ steps.commits.outputs.messages }}" >> $CHANGELOG_FILE
          echo "" >> $CHANGELOG_FILE

      - name: Check PAT_TOKEN existence
        run: |
          if [ -z "${{ secrets.PAT_TOKEN }}" ]; then
            echo "Error: PAT_TOKEN is not set"
            exit 1
          fi

      - name: Commit version and changelog
        if: env.NEW_VERSION != ''
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add ${{ env.NAME_VERSION_FILE }} version/version_log CHANGELOG.md
          git commit -m "Bump version to ${{ env.NEW_VERSION }} and update changelog with all commits"
          git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}

