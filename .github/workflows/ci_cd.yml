name: Test and Notify

on:
  push:
    branches:
      - 'feature/*'
      - 'hotfix/*'
  workflow_dispatch:

jobs:
  create-pr:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.create-pr.outputs.result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Pull Request to develop
        id: create-pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const pulls = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${branch}`,
              base: 'develop'
            });
            let pullNumber;
            if (pulls.data.length === 0) {
              const response = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Merge ${branch} into develop`,
                head: branch,
                base: 'develop',
                body: 'Automatically created by CI/CD pipeline.'
              });
              pullNumber = response.data.number;
              console.log(`Pull Request created: #${pullNumber}`);
            } else {
              pullNumber = pulls.data[0].number;
              console.log(`Pull Request already exists: #${pullNumber}`);
            }
            return pullNumber;

  test-and-notify:
    needs: create-pr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          VERSION=$(cat version/version)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "::set-output name=version::${VERSION}"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Add build version label
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pullNumber = "${{ needs.create-pr.outputs.pr_number }}";
            const version = "${{ env.VERSION }}".replace(/\./g, '-'); // Заменяем точки на дефисы
            if (pullNumber && version) {
              await github.rest.issues.addLabels({
                issue_number: pullNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: [`build-v${version}`]
              });
            }
            
      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: Run Jest tests
        id: frontend-tests
        run: npx jest --json --outputFile=jest-results.json --verbose
        working-directory: ./frontend
        continue-on-error: true

      - name: Add label "test-passed"
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pullNumber = "${{ needs.create-pr.outputs.pr_number }}";
            if (pullNumber) {
              await github.rest.issues.addLabels({
                issue_number: pullNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ["test-passed"]
              });
            }

      - name: Send individual Telegram notifications for frontend tests
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -f jest-results.json ]; then
            cat jest-results.json | jq -c '.testResults[].assertionResults[]' | while read -r test; do
              TEST_NAME=$(echo "$test" | jq -r '.fullName')
              TEST_STATUS=$(echo "$test" | jq -r '.status')
              MESSAGE="Test: $TEST_NAME\nStatus: $TEST_STATUS"
              curl -s -X POST \
                https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage \
                -d chat_id=${TELEGRAM_CHAT_ID} \
                -d text="$(echo -e "$MESSAGE")" \
                -d parse_mode="HTML"
            done
          fi
        working-directory: ./frontend
        shell: bash

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest fastapi httpx
        working-directory: ./backend

      - name: Run backend tests
        id: backend-tests
        run: pytest -v
        working-directory: ./backend
        continue-on-error: true

      - name: Determine test status
        id: test-status
        run: |
          FRONTEND_STATUS="${{ steps.frontend-tests.outcome }}"
          BACKEND_STATUS="${{ steps.backend-tests.outcome }}"
          if [[ "$FRONTEND_STATUS" == "success" && "$BACKEND_STATUS" == "success" ]]; then
            echo "MESSAGE=✅ All tests passed successfully!%0ABranch: ${{ github.ref_name }}%0ACommit: ${{ github.sha }}%0AVersion: ${{ env.VERSION }}" >> $GITHUB_ENV
            echo "STATUS=success" >> $GITHUB_ENV
          else
            echo "MESSAGE=❌ Some tests failed!%0ABranch: ${{ github.ref_name }}%0ACommit: ${{ github.sha }}%0AVersion: ${{ env.VERSION }}%0AFrontend: $FRONTEND_STATUS%0ABackend: $BACKEND_STATUS" >> $GITHUB_ENV
            echo "STATUS=failure" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Send Telegram final notification
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -s -X POST \
            https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage \
            -d chat_id=${TELEGRAM_CHAT_ID} \
            -d text="$MESSAGE" \
            -d parse_mode="HTML"
        shell: bash

      - name: Send email with test results
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: 465
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASSWORD }}
          from: ${{ secrets.SMTP_USER }}
          to: ${{ secrets.EMAIL_RECIPIENT }}
          subject: Test Results - ${{ github.ref_name }} (v${{ env.VERSION }})
          body: |
            The test results are as follows:
            ${{ env.MESSAGE }}
          secure: true

    outputs:
      test_status: ${{ env.STATUS }}
      version: ${{ env.VERSION }}

  auto-merge:
    needs: [create-pr, test-and-notify, sonar-analysis]
    runs-on: ubuntu-latest
    if: needs.test-and-notify.outputs.test_status == 'success'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}
  
      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
  
      - name: Force Merge Feature Branch into Develop Locally
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Set the remote URL with PAT_TOKEN for authentication
          git remote set-url origin https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git
  
          # Fetch all branches
          git fetch origin
  
          # Checkout the feature branch
          git checkout ${{ github.ref_name }}
  
          # Pull latest changes from the feature branch
          git pull origin ${{ github.ref_name }} --ff-only
  
          # Checkout develop branch
          git checkout develop
  
          # Pull latest develop to ensure we're up-to-date
          git pull origin develop --ff-only
  
          # Force merge the feature branch into develop, overwriting conflicts with feature branch changes
          git merge ${{ github.ref_name }} -X ours --allow-unrelated-histories -m "Force merge ${{ github.ref_name }} into develop" || {
            echo "Conflicts detected, forcing feature branch changes over develop"
            git checkout --ours .
            git add .
            git commit -m "Force resolved conflicts in favor of ${{ github.ref_name }}"
          }
  
          # Force push the updated develop branch
          git push origin develop --force
  
      - name: Update and Merge Pull Request via API with Force
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const pullNumber = "${{ needs.create-pr.outputs.pr_number }}";
            if (!pullNumber) {
              console.log("No pull request number available to merge.");
              process.exit(1);
            }
  
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const prNumber = Number(pullNumber);
  
            // Check PR state for logging purposes
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber
            });
            console.log(`PR #${prNumber} mergeable state: ${pr.mergeable_state}`);
  
            // Force merge the PR into develop, overwriting base branch if needed
            try {
              const response = await github.rest.pulls.merge({
                owner,
                repo,
                pull_number: prNumber,
                merge_method: 'merge', // Could use 'rebase' or 'squash' if preferred
                commit_title: `Force merge PR #${prNumber} into develop`,
                commit_message: 'Force merged by CI/CD pipeline, overwriting develop with feature branch changes'
              });
              console.log(`Pull Request #${prNumber} force merged successfully: ${response.data.sha}`);
            } catch (error) {
              console.error(`Failed to force merge PR #${prNumber}: ${error.message}`);
              // If API merge fails (e.g., due to branch protection), log and proceed since local force push already updated develop
              console.log("Falling back to local force push result.");
            }

      - name: Add label "PROD"
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pullNumber = "${{ needs.create-pr.outputs.pr_number }}";
            if (pullNumber) {
              await github.rest.issues.addLabels({
                issue_number: pullNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ["PROD"]
              });
            }

  sonar-analysis:
    needs: test-and-notify
    uses: ./.github/workflows/sonar-analysis.yml
    secrets: inherit
    
  post-sonar-label:
    needs: sonar-analysis
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Add "sec-passed" label
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pullNumber = "${{ needs.create-pr.outputs.pr_number }}";
            if (pullNumber) {
              await github.rest.issues.addLabels({
                issue_number: pullNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ["sec-passed"]
              });
            }
      
  status:
    needs: test-and-notify
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test-and-notify.outputs.test_status }}" != "success" ]; then
            exit 1
          fi

  docker-push:
    needs: test-and-notify
    permissions:
      contents: read
      packages: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/messenger-backend:new
            ${{ secrets.DOCKER_HUB_USERNAME }}/messenger-backend:latest
          push: true

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/messenger-frontend:new
            ${{ secrets.DOCKER_HUB_USERNAME }}/messenger-frontend:latest
          push: true
          
  post-dockerhub-label:
    needs: docker-push
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Add "dockerhub" label
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pullNumber = "${{ needs.create-pr.outputs.pr_number }}";
            if (pullNumber) {
              await github.rest.issues.addLabels({
                issue_number: pullNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ["dockerhub"]
              });
            } 
