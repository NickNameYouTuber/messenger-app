name: Test and Notify

on:
  push:
    branches:
      - 'feature/*'
      - 'hotfix/*'
  pull_request:
    types: [closed]
    branches: [develop]
  workflow_dispatch:

env:
  VERSION_UP: '.github/scripts/version_up.py'
  NAME_VERSION_FILE: 'version/version'
  MAJOR: 'major'
  MINOR: 'minor'
  PATCH: 'patch'

jobs:
  check-skip:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.check-commit.outputs.should_skip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check commit message
        id: check-commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          if echo "$COMMIT_MESSAGE" | grep -q "\[skip ci\]"; then
            echo "should_skip=true" >> $GITHUB_OUTPUT
          else
            echo "should_skip=false" >> $GITHUB_OUTPUT
          fi
        shell: bash
        
  create-pr:
    needs: check-skip
    if: needs.check-skip.outputs.should_skip == 'false'
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.create-pr.outputs.result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Pull Request to develop
        id: create-pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const pulls = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${branch}`,
              base: 'develop'
            });
            let pullNumber;
            if (pulls.data.length === 0) {
              const response = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Merge ${branch} into develop`,
                head: branch,
                base: 'develop',
                body: 'Automatically created by CI/CD pipeline.'
              });
              pullNumber = response.data.number;
              console.log(`Pull Request created: #${pullNumber}`);
            } else {
              pullNumber = pulls.data[0].number;
              console.log(`Pull Request already exists: #${pullNumber}`);
            }
            return pullNumber;

      - name: Send Telegram notification - PR Created
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          MESSAGE="Создан новый PR #%{{ steps.create-pr.outputs.result }}%0AБранч: ${{ github.ref_name }}%0AПроект: ${{ github.repository }}"
          curl -s -X POST \
            https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage \
            -d chat_id=${TELEGRAM_CHAT_ID} \
            -d text="$MESSAGE" \
            -d parse_mode="HTML"

  frontend-tests:
    needs: [check-skip, create-pr]
    if: needs.check-skip.outputs.should_skip == 'false'
    runs-on: ubuntu-latest
    outputs:
      test_status: ${{ steps.set-frontend-status.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: Run Jest tests
        id: frontend-tests
        run: npx jest --json --outputFile=jest-results.json --verbose
        working-directory: ./frontend
        continue-on-error: true

      - name: Send individual Telegram notifications for frontend tests
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -f jest-results.json ]; then
            cat jest-results.json | jq -c '.testResults[].assertionResults[]' | while read -r test; do
              TEST_NAME=$(echo "$test" | jq -r '.fullName')
              TEST_STATUS=$(echo "$test" | jq -r '.status')
              MESSAGE="Test Frontend: $TEST_NAME%0AStatus: $TEST_STATUS"
              curl -s -X POST \
                https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage \
                -d chat_id=${TELEGRAM_CHAT_ID} \
                -d text="$(echo -e "$MESSAGE")" \
                -d parse_mode="HTML"
            done
          fi
        working-directory: ./frontend
        shell: bash

      - name: Set frontend test status
        id: set-frontend-status
        run: echo "status=${{ steps.frontend-tests.outcome }}" >> $GITHUB_OUTPUT

  backend-tests:
    needs: [check-skip, create-pr]
    if: needs.check-skip.outputs.should_skip == 'false'
    runs-on: ubuntu-latest
    outputs:
      test_status: ${{ steps.set-backend-status.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest fastapi httpx
        working-directory: ./backend

      - name: Run backend tests
        id: backend-tests
        run: pytest -v
        working-directory: ./backend
        continue-on-error: true

      - name: Send Telegram notification - Backend Tests
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          STATUS="${{ steps.backend-tests.outcome }}"
          MESSAGE="Backend Tests Completed%0AStatus: $STATUS"
          curl -s -X POST \
            https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage \
            -d chat_id=${TELEGRAM_CHAT_ID} \
            -d text="$MESSAGE" \
            -d parse_mode="HTML"
        shell: bash

      - name: Set backend test status
        id: set-backend-status
        run: echo "status=${{ steps.backend-tests.outcome }}" >> $GITHUB_OUTPUT

  antivirus-tests:
    needs: [check-skip, create-pr]
    if: needs.check-skip.outputs.should_skip == 'false'
    runs-on: ubuntu-latest
    outputs:
      sec_status: ${{ steps.set-sec-status.outputs.sec_status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Antivirus Scan
        id: antivirus
        run: |
          echo "Running antivirus tests..."
          exit 0
      - name: Set security test status
        id: set-sec-status
        run: echo "sec_status=success" >> $GITHUB_OUTPUT

  sonar-analysis:
    needs: [check-skip, frontend-tests, backend-tests]
    if: needs.check-skip.outputs.should_skip == 'false'
    uses: ./.github/workflows/sonar-analysis.yml
    secrets: inherit

  versioning:
    if: |
      github.event_name == 'pull_request' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'develop'
    runs-on: ubuntu-latest      
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Determine version bump type
        id: bump-type
        run: |
          if [[ "${{ github.event.pull_request.head.ref }}" == feature/* ]]; then
            echo "BUMP_TYPE=minor" >> $GITHUB_ENV
          elif [[ "${{ github.event.pull_request.head.ref }}" == hotfix/* ]]; then
            echo "BUMP_TYPE=patch" >> $GITHUB_ENV
          fi

      - name: Update version
        run: |
          python ${{ env.VERSION_UP }} ${{ env.NAME_VERSION_FILE }} ${{ env.BUMP_TYPE }}
          echo "NEW_VERSION=$(cat ${{ env.NAME_VERSION_FILE }})" >> $GITHUB_ENV

      - name: Commit version changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add ${{ env.NAME_VERSION_FILE }} version/version_log
          git commit -m "Bump version to ${{ env.NEW_VERSION }} [skip ci]"
          git push origin develop

      - name: Set version output
        id: set-version
        run: echo "version=${{ env.NEW_VERSION }}" >> $GITHUB_OUTPUT

  test-notify:
    needs: [check-skip, create-pr, frontend-tests, backend-tests, antivirus-tests, sonar-analysis]
    if: needs.check-skip.outputs.should_skip == 'false'
    runs-on: ubuntu-latest
    outputs:
      test_status: ${{ steps.determine-status.outputs.test_status }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get-version
        run: |
          VERSION=$(cat version/version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Add build version label
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pullNumber = "${{ needs.create-pr.outputs.pr_number }}";
            const version = "${{ env.VERSION }}".replace(/\./g, '-');
            if (pullNumber && version) {
              await github.rest.issues.addLabels({
                issue_number: pullNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: [`build-v${version}`]
              });
            }

      - name: Add label "test-passed"
        if: ${{ needs.frontend-tests.outputs.test_status == 'success' && needs.backend-tests.outputs.test_status == 'success' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pullNumber = "${{ needs.create-pr.outputs.pr_number }}";
            if (pullNumber) {
              await github.rest.issues.addLabels({
                issue_number: pullNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ["test-passed"]
              });
            }

      - name: Add label "sec-passed"
        if: ${{ needs.antivirus-tests.outputs.sec_status == 'success' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pullNumber = "${{ needs.create-pr.outputs.pr_number }}";
            if (pullNumber) {
              await github.rest.issues.addLabels({
                issue_number: pullNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ["sec-passed"]
              });
            }

      - name: Determine test status
        id: determine-status
        run: |
          FRONTEND_STATUS="${{ needs.frontend-tests.outputs.test_status }}"
          BACKEND_STATUS="${{ needs.backend-tests.outputs.test_status }}"
          if [[ "$FRONTEND_STATUS" == "success" && "$BACKEND_STATUS" == "success" ]]; then
            echo "MESSAGE=✅ All tests passed successfully!%0ABranch: ${{ github.ref_name }}%0ACommit: ${{ github.sha }}%0AVersion: ${{ env.VERSION }}" >> $GITHUB_ENV
            echo "test_status=success" >> $GITHUB_OUTPUT
          else
            echo "MESSAGE=❌ Some tests failed!%0ABranch: ${{ github.ref_name }}%0ACommit: ${{ github.sha }}%0AVersion: ${{ env.VERSION }}%0AFrontend: $FRONTEND_STATUS%0ABackend: $BACKEND_STATUS" >> $GITHUB_ENV
            echo "test_status=failure" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Send Telegram notification - Test Summary
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          MESSAGE="${MESSAGE}%0AТекущий этап: Завершение тестов"
          curl -s -X POST \
            https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage \
            -d chat_id=${TELEGRAM_CHAT_ID} \
            -d text="$MESSAGE" \
            -d parse_mode="HTML"

      - name: Send email with test results
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: 465
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASSWORD }}
          from: ${{ secrets.SMTP_USER }}
          to: ${{ secrets.EMAIL_RECIPIENT }}
          subject: Test Results - ${{ github.ref_name }} (v${{ env.VERSION }})
          body: |
            The test results are as follows:
            ${{ env.MESSAGE }}
          secure: true

  auto-merge:
    needs: [check-skip, create-pr, test-notify, sonar-analysis, versioning]
    if: always() && needs.check-skip.outputs.should_skip == 'false'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Force Merge Feature Branch into Develop Locally
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git remote set-url origin https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch origin
          git checkout ${{ github.ref_name }}
          git pull origin ${{ github.ref_name }} --ff-only
          git checkout develop
          git pull origin develop --ff-only
          git merge ${{ github.ref_name }} -X ours --allow-unrelated-histories -m "Force merge ${{ github.ref_name }} into develop" || {
            echo "Conflicts detected, forcing feature branch changes over develop"
            git checkout --ours .
            git add .
            git commit -m "Force resolved conflicts in favor of ${{ github.ref_name }}"
          }
          git push origin develop --force

      - name: Update and Merge Pull Request via API with Force
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const pullNumber = "${{ needs.create-pr.outputs.pr_number }}";
            if (!pullNumber) {
              console.log("No pull request number available to merge.");
              process.exit(1);
            }
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const prNumber = Number(pullNumber);
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber
            });
            console.log(`PR #${prNumber} mergeable state: ${pr.mergeable_state}`);
            try {
              const response = await github.rest.pulls.merge({
                owner,
                repo,
                pull_number: prNumber,
                merge_method: 'merge',
                commit_title: `Force merge PR #${prNumber} into develop`,
                commit_message: 'Force merged by CI/CD pipeline, overwriting develop with feature branch changes'
              });
              console.log(`Pull Request #${prNumber} force merged successfully: ${response.data.sha}`);
            } catch (error) {
              console.error(`Failed to force merge PR #${prNumber}: ${error.message}`);
              console.log("Falling back to local force push result.");
            }

      - name: Send Telegram notification - Merge Completed
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          MESSAGE="PR #${{ needs.create-pr.outputs.pr_number }} успешно смержен%0AБранч: ${{ github.ref_name }}%0AПроект: ${{ github.repository }}"
          curl -s -X POST \
            https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage \
            -d chat_id=${TELEGRAM_CHAT_ID} \
            -d text="$MESSAGE" \
            -d parse_mode="HTML"

      - name: Add label "PROD"
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pullNumber = "${{ needs.create-pr.outputs.pr_number }}";
            if (pullNumber) {
              await github.rest.issues.addLabels({
                issue_number: pullNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ["PROD"]
              });
            }

  docker-push:
    needs: [versioning]
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/develop')) ||
      (github.event.pull_request.merged == true)
    permissions:
      contents: read
      packages: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/messenger-backend:${{ needs.versioning.outputs.version }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/messenger-backend:latest
          push: true

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/messenger-frontend:${{ needs.versioning.outputs.version }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/messenger-frontend:latest
          push: true
          
      - name: Send Telegram notification - Docker Push Completed
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          MESSAGE="Docker образы успешно загружены%0AВерсия: ${{ needs.test-notify.outputs.version }}%0AПроект: ${{ github.repository }}"
          curl -s -X POST \
            https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage \
            -d chat_id=${TELEGRAM_CHAT_ID} \
            -d text="$MESSAGE" \
            -d parse_mode="HTML"

      - name: Add label "dockerhub"
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pullNumber = "${{ needs.create-pr.outputs.pr_number }}";
            if (pullNumber) {
              await github.rest.issues.addLabels({
                issue_number: pullNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ["dockerhub"]
              });
            }

  deploy-dev:
    needs: [check-skip, auto-merge, docker-push]
    if: always() && needs.check-skip.outputs.should_skip == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Deploy to Development Server
        run: |
          echo "Deploying to dev server..."
      - name: Deploy Kubernetes Pods
        run: |
          echo "Deploying pods in Kubernetes..."

  final-report:
    needs: [check-skip, create-pr, frontend-tests, backend-tests, test-notify, auto-merge, sonar-analysis, docker-push]
    if: always() && needs.check-skip.outputs.should_skip == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Send Final Telegram Report
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          REPO_OWNER=$(echo "${{ github.repository }}" | cut -d '/' -f 1)
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
          REPORT="Новый выпуск изменений%0AПроект: ${{ github.repository }}%0AВерсия: ${{ needs.test-notify.outputs.version }}%0AДата: $(date '+%Y.%m.%d %H:%M:%S')%0AАвтор: ${{ github.actor }}%0AИнформация о Git-репозитории%0AGIT MR: ${{ needs.create-pr.outputs.pr_number }}%0AGIT TAG: ${{ needs.test-notify.outputs.version }}%0AИнформация о Docker-репозитории%0AВладелец: ${{ secrets.DOCKER_HUB_USERNAME }}%0AНазвание: $REPO_NAME%0AТег: ${{ needs.test-notify.outputs.version }}%0AПолное имя: ${{ secrets.DOCKER_HUB_USERNAME }}/$REPO_NAME:v${{ needs.test-notify.outputs.version }}%0AСсылки:%0A- Docker Hub: https://hub.docker.com/r/${{ secrets.DOCKER_HUB_USERNAME }}/$REPO_NAME%0A- Стенд: http://ni-corp.tech/"
          echo "$REPORT"
          curl -s -X POST \
            https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage \
            -d chat_id=${TELEGRAM_CHAT_ID} \
            -d text="$REPORT" \
            -d parse_mode="HTML" || echo "Не удалось отправить основной отчёт"

      - name: Send Changelog File (if exists)
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -f changelog.md ]; then
            curl -s -X POST \
              https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendDocument \
              -F chat_id=${TELEGRAM_CHAT_ID} \
              -F document=@changelog.md \
              -F caption="Changelog для версии ${{ needs.test-notify.outputs.version }}" \
              -F parse_mode="HTML" || echo "Не удалось отправить файл changelog"
          else
            curl -s -X POST \
              https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage \
              -d chat_id=${TELEGRAM_CHAT_ID} \
              -d text="Changelog not found" \
              -d parse_mode="HTML" || echo "Не удалось отправить сообщение об отсутствии changelog"
          fi
        shell: bash