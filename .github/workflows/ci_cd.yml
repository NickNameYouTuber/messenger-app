name: Test and Notify

on:
  push:
    branches:
      - 'feature/*'
      - 'hotfix/*'

jobs:
  create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Создаем Pull Request в ветку develop
      - name: Create Pull Request to develop
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const response = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Merge ${branch} into develop`,
              head: branch,
              base: 'develop',
              body: 'Automatically created by CI/CD pipeline.',
            });
            console.log(`Pull Request created: #${response.data.number}`);
            // Сохраняем номер PR для использования в других джобах
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'ci_cd.yml',
              ref: branch,
              inputs: { pr_number: response.data.number }
            });

  test-and-notify:
    needs: create-pr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Read version from file
      - name: Get version
        id: version
        run: |
          VERSION=$(cat version/version)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "::set-output name=version::${VERSION}"

      # Настройка и тестирование фронтенда
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: Run Jest tests
        id: frontend-tests
        run: npx jest --json --outputFile=jest-results.json --verbose
        working-directory: ./frontend
        continue-on-error: true

      # Label | test-passed
      - name: Add label "test-passed"
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const pulls = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${branch}`
            });
            if (pulls.data.length > 0) {
              const pullNumber = pulls.data[0].number;
              await github.rest.issues.addLabels({
                issue_number: pullNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ["test-passed"]
              });
            }

      # Отправляем уведомления в Telegram для каждого теста
      - name: Send individual Telegram notifications for frontend tests
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -f jest-results.json ]; then
            cat jest-results.json | jq -c '.testResults[].assertionResults[]' | while read -r test; do
              TEST_NAME=$(echo "$test" | jq -r '.fullName')
              TEST_STATUS=$(echo "$test" | jq -r '.status')
              MESSAGE="Test: $TEST_NAME\nStatus: $TEST_STATUS"
              curl -s -X POST \
                https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage \
                -d chat_id=${TELEGRAM_CHAT_ID} \
                -d text="$(echo -e "$MESSAGE")" \
                -d parse_mode="HTML"
            done
          fi
        working-directory: ./frontend
        shell: bash

      # Настройка и тестирование бэкенда
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest fastapi httpx
        working-directory: ./backend

      - name: Run backend tests
        id: backend-tests
        run: pytest -v
        working-directory: ./backend
        continue-on-error: true

      # Определяем общий статус тестирования
      - name: Determine test status
        id: test-status
        run: |
          FRONTEND_STATUS="${{ steps.frontend-tests.outcome }}"
          BACKEND_STATUS="${{ steps.backend-tests.outcome }}"
          if [[ "$FRONTEND_STATUS" == "success" && "$BACKEND_STATUS" == "success" ]]; then
            echo "MESSAGE=✅ All tests passed successfully!%0ABranch: ${{ github.ref_name }}%0ACommit: ${{ github.sha }}%0AVersion: ${{ env.VERSION }}" >> $GITHUB_ENV
            echo "STATUS=success" >> $GITHUB_ENV
          else
            echo "MESSAGE=❌ Some tests failed!%0ABranch: ${{ github.ref_name }}%0ACommit: ${{ github.sha }}%0AVersion: ${{ env.VERSION }}%0AFrontend: $FRONTEND_STATUS%0ABackend: $BACKEND_STATUS" >> $GITHUB_ENV
            echo "STATUS=failure" >> $GITHUB_ENV
          fi
        shell: bash

      # Отправляем итоговое уведомление в Telegram
      - name: Send Telegram final notification
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -s -X POST \
            https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage \
            -d chat_id=${TELEGRAM_CHAT_ID} \
            -d text="$MESSAGE" \
            -d parse_mode="HTML"
        shell: bash

      # Отправляем итоговое уведомление по email
      - name: Send email with test results
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: 465
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASSWORD }}
          from: ${{ secrets.SMTP_USER }}
          to: ${{ secrets.EMAIL_RECIPIENT }}
          subject: Test Results - ${{ github.ref_name }} (v${{ env.VERSION }})
          body: |
            The test results are as follows:
            ${{ env.MESSAGE }}
          secure: true

    outputs:
      test_status: ${{ env.STATUS }}
      version: ${{ env.VERSION }}

  auto-merge:
    needs: test-and-notify
    runs-on: ubuntu-latest
    if: needs.test-and-notify.outputs.test_status == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Автоматический мердж PR в develop
      - name: Merge Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const pulls = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${branch}`,
              base: 'develop'
            });
            if (pulls.data.length > 0) {
              const pullNumber = pulls.data[0].number;
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pullNumber,
                merge_method: 'merge'
              });
              console.log(`Pull Request #${pullNumber} merged successfully.`);
            } else {
              console.log("No open pull request found to merge.");
            }

  sonar-analysis:
    needs: test-and-notify
    uses: ./.github/workflows/sonar-analysis.yml
    secrets: inherit

  status:
    needs: test-and-notify
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test-and-notify.outputs.test_status }}" != "success" ]; then
            exit 1
          fi

  docker-push:
    needs: test-and-notify
    permissions:
      contents: read
      packages: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/messenger-backend:v${{ needs.test-and-notify.outputs.version }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/messenger-backend:new
            ${{ secrets.DOCKER_HUB_USERNAME }}/messenger-backend:latest
          push: true

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/messenger-frontend:v${{ needs.test-and-notify.outputs.version }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/messenger-frontend:new
            ${{ secrets.DOCKER_HUB_USERNAME }}/messenger-frontend:latest
          push: true
