name: Test and Notify

on:
  push:
    branches:
      - 'feature/*'
      - 'hotfix/*'

jobs:
  test-and-notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Настройка и тестирование фронтенда
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: Run Jest tests
        id: frontend-tests
        run: |
          npx jest ./world-time-city-tests.js --verbose
        working-directory: ./frontend
        continue-on-error: true

      # Настройка и тестирование бэкенда
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest fastapi httpx
        working-directory: ./backend

      - name: Run backend tests
        id: backend-tests
        run: |
          pytest -v
        working-directory: ./backend
        continue-on-error: true

      # Определяем общий статус тестирования
      - name: Determine test status
        id: test-status
        run: |
          FRONTEND_STATUS="${{ steps.frontend-tests.outcome }}"
          BACKEND_STATUS="${{ steps.backend-tests.outcome }}"
          
          if [[ "$FRONTEND_STATUS" == "success" && "$BACKEND_STATUS" == "success" ]]; then
            echo "MESSAGE=✅ Tests passed successfully!%0ABranch: ${{ github.ref_name }}%0ACommit: ${{ github.sha }}" >> $GITHUB_ENV
            echo "STATUS=success" >> $GITHUB_ENV
          else
            echo "MESSAGE=❌ Tests failed!%0ABranch: ${{ github.ref_name }}%0ACommit: ${{ github.sha }}%0AFrontend: $FRONTEND_STATUS%0ABackend: $BACKEND_STATUS" >> $GITHUB_ENV
            echo "STATUS=failure" >> $GITHUB_ENV
          fi
        shell: bash

      # Отправляем уведомление в Telegram
      - name: Send Telegram notification
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -s -X POST \
            https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage \
            -d chat_id=${TELEGRAM_CHAT_ID} \
            -d text="${{ env.MESSAGE }}" \
            -d parse_mode="Markdown"

    outputs:
      test_status: ${{ env.STATUS }}

  # Завершающая проверка, которая завершает workflow с ошибкой, если тесты не прошли
  status:
    needs: test-and-notify
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test-and-notify.outputs.test_status }}" != "success" ]; then
            exit 1
          fi
