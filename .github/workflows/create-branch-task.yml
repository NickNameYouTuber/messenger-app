name: Create branch on Sprint Backlog addition

on:
  project_card:
    types: [moved]

jobs:
  create-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Get column details
        id: get_column
        run: |
          # Получаем URL колонки из события
          column_url="${{ github.event.project_card.column_url }}"
          echo "Column URL: $column_url"
          # Получаем данные колонки через API GitHub
          column_json=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -s $column_url)
          # Извлекаем имя колонки (нужен jq, он предустановлен на ubuntu-latest)
          column_name=$(echo $column_json | jq -r '.name')
          echo "Column name: $column_name"
          # Если колонка не «Sprint Backlog», прекращаем выполнение
          if [ "$column_name" != "Sprint Backlog" ]; then
            echo "Not Sprint Backlog column. Exiting."
            exit 0
          fi
          echo "::set-output name=column_name::$column_name"

      - name: Parse task title and compute branch name
        id: get_branch
        run: |
          card_note="${{ github.event.project_card.note }}"
          echo "Card note: $card_note"
          # Проверяем, что задача начинается с [что-то] feature или hotfix, затем название
          if [[ "$card_note" =~ ^\[.*\]\ (feature|hotfix)\ (.*) ]]; then
            type="${BASH_REMATCH[1]}"
            name="${BASH_REMATCH[2]}"
            # Преобразуем название: переводим в нижний регистр и заменяем пробелы на _
            branch_name=$(echo "$name" | tr '[:upper:]' '[:lower:]' | sed 's/ /_/g')
            final_branch="${type}/_${branch_name}"
            echo "Branch name: $final_branch"
            echo "::set-output name=branch::$final_branch"
          else
            echo "Task does not match criteria. Exiting."
            exit 0
          fi

      - name: Checkout main branch
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Create and push branch
        run: |
          branch=${{ steps.get_branch.outputs.branch }}
          echo "Creating branch: $branch"
          git checkout -b "$branch"
          git push origin "$branch"
