name: Auto Create Branch from Task

on:
  project_card:
    types: [created, moved]

jobs:
  create-branch:
    runs-on: ubuntu-latest
    if: |
      github.event.project_card.column_id == 'YOUR_SPRINT_BACKLOG_COLUMN_ID' &&
      contains(github.event.project_card.content_url, '/issues/')

    steps:
      - name: Get Issue Data
        id: get_issue
        env:
          ISSUE_URL: ${{ github.event.project_card.content_url }}
        run: |
          issue_id=${ISSUE_URL##*/}
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${issue_id}")
          
          title=$(echo "$response" | jq -r '.title')
          echo "title=$title" >> $GITHUB_OUTPUT

      - name: Process Branch Name
        id: process_name
        run: |
          title="${{ steps.get_issue.outputs.title }}"
          
          # Извлекаем feature/hotfix
          branch_type=$(echo "$title" | grep -ioP '(?<=\s)(feature|hotfix)(?=\s)' | tr '[:upper:]' '[:lower:]' || true)
          
          if [ -z "$branch_type" ]; then
            echo "Skipping: no feature/hotfix found"
            exit 0
          fi

          # Форматируем название
          clean_title=$(echo "$title" | sed -E "s/.*$branch_type//i")
          branch_name=$(echo "$clean_title" | \
            tr '[:upper:]' '[:lower:]' | \
            tr ' ' '_' | \
            tr -cd '[:alnum:]_' | \
            sed 's/_\+/_/g')
          
          echo "branch_name=${branch_type}/_${branch_name#_}" >> $GITHUB_OUTPUT

      - name: Create Branch
        if: steps.process_name.outputs.branch_name != ''
        uses: peterjgrainger/action-create-branch@v2.2.0
        with:
          branch: ${{ steps.process_name.outputs.branch_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
